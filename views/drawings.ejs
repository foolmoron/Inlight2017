<% var title = 'Drawings' %>
<% include header %>

<div class="container-fluid drawings">
    <div class="row">
        <div class="col-sm-12 col-md-2 picker hue-shift-speed">
            <div>Hue Shift <span></span></div>
            <input type="range" min=0 max=10 step=0.5 onchange="get('/hueshiftspeed/' + this.value); setHueShiftSpeed(this.value);" oninput="setHueShiftSpeed(this.value)"></input>
        </div>
        <div class="col-sm-12 col-md-3 picker" data-type='animal'>
            <div>Animal Color</div>
            <input type="range" min=0 max=360 step=1 onchange="get('/color/animal/' + this.value); setColorPicker('animal', this.value);" oninput="setColorPicker('animal', this.value)"></input>
        </div>
        <div class="col-sm-12 col-md-3 picker" data-type='plant'>
            <div>Plant Color</div>
            <input type="range" min=0 max=360 step=1 onchange="get('/color/plant/' + this.value); setColorPicker('plant', this.value);" oninput="setColorPicker('plant', this.value)"></input>
        </div>
        <div class="col-sm-12 col-md-3 picker" data-type='bird'>
            <div>Bird Color</div>
            <input type="range" min=0 max=360 step=1 onchange="get('/color/bird/' + this.value); setColorPicker('bird', this.value);" oninput="setColorPicker('bird', this.value)"></input>
        </div>
        <div class="col-sm-12 col-md-3 picker" data-type='building'>
            <div>Building Color</div>
            <input type="range" min=0 max=360 step=1 onchange="get('/color/building/' + this.value); setColorPicker('building', this.value);" oninput="setColorPicker('building', this.value)"></input>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <button class="btn btn-success global-aa-enable hidden" onclick="get('/globalautoapprove/true', update)" style="padding: 16px 10px; font-size: 1.7em;">Enable Global Auto-Approve</button>
            <button class="btn btn-warning global-aa-disable hidden" onclick="get('/globalautoapprove/false', update)" style="padding: 16px 10px; font-size: 1.7em;">Disable Global Auto-Approve</button>
        </div>
    </div>
    <div class="filter-container">
        <div class="btn" data-filter="queue" data-color="rgb(228, 8, 211)" onclick="changeFilterMode(this)">Priority Queue (<span id="queueCount">999</span>)</div>
        <div class="btn" data-filter="fresh" data-color="rgb(0, 189, 219)" onclick="changeFilterMode(this)">Fresh (<span id="freshCount">999</span>)</div>
        <div class="btn" data-filter="approved" data-color="rgb(0, 67, 219)" onclick="changeFilterMode(this)">Approved (<span id="approvedCount">999</span>)</div>
        <div class="btn" data-filter="autoapproved" data-color="rgb(13, 219, 0)" onclick="changeFilterMode(this)">Auto-Approved (<span id="autoapprovedCount">999</span>)</div>
        <div class="btn" data-filter="ignored" data-color="rgb(219, 142, 0)" onclick="changeFilterMode(this)">Ignored (<span id="ignoredCount">999</span>)</div>
        <div class="btn" data-filter="deleted" data-color="rgb(219, 40, 0)" onclick="changeFilterMode(this)">Deleted (<span id="deletedCount">999</span>)</div>
    </div>
    <div class="drawing-container">
    </div>
</div>

<script id="drawing-template" type="text/template">
    <div class="row drawing-row <$= drawing.status $> <$= drawing.completedTime ? 'completed' : '' $>" data-uuid="<$= drawing.uuid $>">
        <div class="row" style="padding: 0px 10px;">
            <div class="col-xs-5 text-left">
                <b><$= drawing.uuid $> -- <$= drawing.status $></b>
            </div>
            <div class="col-xs-3 text-center">
                <b><$= (drawing.dimensions || {}).width || 'N/A' $> x <$= (drawing.dimensions || {}).height || 'N/A' $></b>
                <select onchange="get('/drawing/<$= drawing.uuid $>/type/' + this.value)">
                    <option value="a" <$= drawing.type == 'a' ? 'selected' : '' $>>a ANIMAL</option>
                    <option value="p" <$= drawing.type == 'p' ? 'selected' : '' $>>p PLANT</option>
                    <option value="t" <$= drawing.type == 't' ? 'selected' : '' $>>t TREE</option>
                    <option value="b" <$= drawing.type == 'b' ? 'selected' : '' $>>b BUSH</option>
                    <option value="g" <$= drawing.type == 'g' ? 'selected' : '' $>>g GRASS</option>
                    <option value="r" <$= drawing.type == 'r' ? 'selected' : '' $>>r BIRD</option>
                    <option value="f" <$= drawing.type == 'f' ? 'selected' : '' $>>f FLOCK</option>
                    <option value="d" <$= drawing.type == 'd' ? 'selected' : '' $>>d BUILDING</option>
                </select>
            </div>
            <div class="col-xs-4 text-right">
                <b><$= new Date(drawing.meta.updated).toLocaleString() $></b>
            </div>
        </div>
        <div class="col-xs-3 col-md-3">
            <button class="btn btn-warning primary-button <$= drawing.status == 'ignored' ? 'hidden' : '' $>" onclick="get('/drawing/<$= drawing.uuid $>/ignore/true', update)">Ignore</button>
            <button class="btn btn-info primary-button <$= drawing.status != 'ignored' ? 'hidden' : '' $>" type="submit" onclick="get('/drawing/<$= drawing.uuid $>/ignore/false', update)">Disable Ignore</button>
            <button class="btn btn-danger secondary-button" type="submit" onclick="get('/drawing/<$= drawing.uuid $>/delete', update)">Delete</button>
        </div>
        <div class="col-xs-6 col-md-6 text-center" style="padding: 0;">
            <div class="drawing-grid">
                <div style="grid-area: 1 / 1 / span 1 / span 1;">
                    <button class="btn tall-button" type="submit" onclick="get('/drawing/<$= drawing.uuid $>/facing/l', update)" style="background-color: #6d6d6d; opacity: <$= drawing.facing == 'l' ? 1 : 0.3 $>;">
                        <<br><<br><<br><<br><<br>
                    </button>
                </div>
                <div style="grid-area: 1 / 2 / span 1 / span 2;">
                    <$ if (drawing.status == 'updated') { $>
                        <img src="<$= dirApproved $><$= drawing.uuid $>.png?cachebuster=<$= Math.random() $>" />
                    <$ } $>
                    <img src="<$= dirNew $><$= drawing.uuid $>.png?cachebuster=<$= Math.random() $>" />
                </div>
                <div style="grid-area: 1 / 4 / span 1 / span 1;">
                    <button class="btn tall-button" type="submit" onclick="get('/drawing/<$= drawing.uuid $>/facing/r', update)" style="background-color: #6d6d6d; opacity: <$= drawing.facing == 'r' ? 1 : 0.3 $>;">
                        ><br>><br>><br>><br>><br>
                    </button>
                </div>
                <div style="grid-area: 2 / 2 / span 1 / span 2;">
                    <button class="btn" type="submit" onclick="get('/drawing/<$= drawing.uuid $>/<$= drawing.completedTime ? 'incomplete' : 'complete' $>', update)" style="background-color: #ff3bcc; margin: 4px 0px 0px 0px; opacity: <$= drawing.completedTime ? 1 : 0.5 $>;">
                        <$= drawing.completedTime ? 'COMPLETED' : 'incomplete' $>
                    </button>
                </div>
            </div>
        </div>
        <div class="col-xs-3 col-md-3">
            <button class="btn btn-primary primary-button" onclick="get('/drawing/<$= drawing.uuid $>/approve', update)">Approve Once</button>
            <button class="btn btn-success secondary-button <$= drawing.autoapprove ? 'hidden' : '' $>" onclick="get('/drawing/<$= drawing.uuid $>/autoapprove/true', update)">Auto-Approve</button>
            <button class="btn btn-warning secondary-button <$= drawing.autoapprove ? '' : 'hidden' $>" onclick="get('/drawing/<$= drawing.uuid $>/autoapprove/false', update)">Disable Auto-Approve</button>
        </div>
    </div>
</script>

<script src="js/ejs.min.js"></script>
<script>
var drawingContainer = document.querySelector('.drawing-container')
var drawingTemplate = document.querySelector('#drawing-template').innerHTML.trim()

var globalAutoApproveEnable = document.querySelector('.global-aa-enable')
var globalAutoApproveDisable = document.querySelector('.global-aa-disable')

var dirNew = '<%= dirNew %>'
var dirApproved = '<%= dirApproved %>'

var drawings = []

function renderDrawing(drawing) {
    var html = ejs.render(drawingTemplate, {drawing, dirNew, dirApproved}, {delimiter: '$'})
    var div = document.createElement('div')
    div.innerHTML = html
    var newNode = div.firstChild
    return newNode
}

function renderDrawings() {
    // filter and sort
    var filteredDrawings = filters[currentFilter].items
    // render nodes
    var nodes = filteredDrawings.map(drawing => {
        var existingNode = document.querySelector('[data-uuid="' + drawing.uuid + '"]')
        if (drawing.dirty) {
            if (existingNode) {
                existingNode.remove()
            }
            existingNode = null
            drawing.dirty = false
        }
        return existingNode || renderDrawing(drawing)
    })
    // hide old nodes
    Array.from(drawingContainer.children).forEach(node => node.style.display = 'none')
    // add new nodes
    nodes.forEach(node => {
        node.style.display = 'block'
        node.remove()
        drawingContainer.append(node)
    })
}

function updateDrawing(uuid) {
    get('/drawing/' + uuid, xhr => {
        renderDrawing(JSON.parse(xhr.responseText))
    })
}

function updateGlobalAutoApprove(toggle) {
    if (toggle) {
        globalAutoApproveEnable.classList.add('hidden')
        globalAutoApproveDisable.classList.remove('hidden')
    } else {
        globalAutoApproveEnable.classList.remove('hidden')
        globalAutoApproveDisable.classList.add('hidden')
    }
}

// filter setup
var filters = {
    // new and updated, completed only, sorted by longest waiting for status update
    queue: {
        countEl: document.querySelector('#queueCount'),
        filter: (item) => item.completedTime && (item.status == 'new' || item.status == 'updated'),
        sort: (item1, item2) => ((item1.completedTime || 0) - (item2.completedTime || 0)) || (item1.meta.updated - item2.meta.updated),
        items: [],
    },
    // new and updated, not completed, sorted by last updated
    fresh: {
        countEl: document.querySelector('#freshCount'),
        filter: (item) => !item.completedTime && !item.empty && (item.status == 'new' || item.status == 'updated'),
        sort: (item1, item2) => item1.meta.updated - item2.meta.updated,
        items: [],
    },
    // approved only, sorted by earliest updated
    approved: {
        countEl: document.querySelector('#approvedCount'),
        filter: (item) => item.status == 'approved',
        sort: (item1, item2) => item2.meta.updated - item1.meta.updated,
        items: [],
    },
    // auto approved only, sorted by earliest updated
    autoapproved: {
        countEl: document.querySelector('#autoapprovedCount'),
        filter: (item) => item.autoapprove,
        sort: (item1, item2) => item2.meta.updated - item1.meta.updated,
        items: [],
    },
    // ignored only, sorted by earliest updated
    ignored: {
        countEl: document.querySelector('#ignoredCount'),
        filter: (item) => item.status == 'ignored',
        sort: (item1, item2) => item2.meta.updated - item1.meta.updated,
        items: [],
    },
    // deleted only, sorted by earliest updated
    deleted: {
        countEl: document.querySelector('#deletedCount'),
        filter: (item) => item.status == 'deleted',
        sort: (item1, item2) => item2.meta.updated - item1.meta.updated,
        items: [],
    },
}
var currentFilter = 'queue'

function updateLists() {
    for (var filterType in filters) {
        var filterObj = filters[filterType]
        filterObj.items = drawings.filter(filterObj.filter)
        filterObj.items.sort(filterObj.sort)
        filterObj.countEl.textContent = filterObj.items.length
    }
}

function changeFilterMode(filterPicker) {
    currentFilter = filterPicker.dataset.filter
    // set buttons
    filterPickers.forEach(picker => { picker.style.opacity = 0.5; picker.style.flexGrow = 1 })
    filterPicker.style.opacity = 1
    filterPicker.style.flexGrow = 2
    // rerender
    renderDrawings()
}
var filterPickers = Array.from(document.querySelectorAll('[data-filter]'))
filterPickers.forEach(picker => picker.style.backgroundColor = picker.dataset.color)
changeFilterMode(filterPickers[0])

// color inputs
var colorPickers = {
    animal: document.querySelector('.picker[data-type="animal"]'),
    plant: document.querySelector('.picker[data-type="plant"]'),
    bird: document.querySelector('.picker[data-type="bird"]'),
    building: document.querySelector('.picker[data-type="building"]'),
}
var hueShiftText = document.querySelector('.hue-shift-speed span')
var hueShiftInput = document.querySelector('.hue-shift-speed input')

function setHueShiftSpeed(speed) {
    hueShiftText.textContent = speed
    hueShiftInput.value = speed
}
function setColorPicker(type, hue) {
    colorPickers[type].style.backgroundColor = "hsl(" + hue + ", 100%, 50%)"
    colorPickers[type].querySelector('input').value = hue
}

// update
var lastUpdateTime = 0
function update() {
    get('/drawingupdates/' + lastUpdateTime, xhr => {
        var response = JSON.parse(xhr.responseText)
        lastUpdateTime = response.time
        // apply updates to collection
        response.drawings.forEach(drawing => {
            drawing.dirty = true
            for (var i = 0; i < drawings.length; i++) {
                if (drawings[i].uuid == drawing.uuid) {
                    drawings[i] = drawing
                    return
                }
            }
            drawings.push(drawing)
        })
        // update lists
        updateLists()
        // render
        if (response.drawings.length) {
            renderDrawings()
        }
    })
    get('/globalautoapprove', xhr => {
        updateGlobalAutoApprove(xhr.responseText == 'true')
    })
    get('/hueshiftspeed', xhr => {
        setHueShiftSpeed(parseFloat(xhr.responseText))
    })
    for (let type in colorPickers) {
        get('/color/' + type, xhr => {
            setColorPicker(type, xhr.responseText)
        })
    }
}

// initial pull
document.addEventListener('DOMContentLoaded', update, false)
// interval
var updateInterval = setInterval(update, 1500)
</script>

<% include footer %>